<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kjw.my2.mapper.StoryMapper">
    <sql id="type">
        /* 검색 순서 지정 */
        <choose>
            <when test="type == 'l'.toString()">
                story_like
            </when>

            <when test="type == 'v'.toString()">
                story_view
            </when>

            <otherwise>
                story_seq
            </otherwise>
        </choose>
    </sql>

    <sql id="condition">
        /* 검색 조건 지정 */
        <if test="keyword != null">
            <bind name="kwd" value="'%'+keyword+'%'"/>
        </if>

        <choose>
            <when test="type == 'i'.toString()">
                and storys.user_id like #{kwd} and story_imgs.user_id like #{kwd}
            </when>

            <when test="type == 'a'.toString()">
                and storys.story_area like #{kwd}
            </when>

            <otherwise>
                /* 검색이 아닐 시 공백 처리 */
            </otherwise>
        </choose>
    </sql>

    <sql id="condiCount">
        /* 검색 조건 지정 (갯수 검색용) */
        <if test="keyword != null">
            <bind name="kwd" value="'%'+keyword+'%'"/>
        </if>

        <choose>
            <when test="type == 'i'.toString()">
                where user_id like #{kwd}
            </when>

            <when test="type == 'a'.toString()">
                where story_area like #{kwd}
            </when>

            <otherwise>
                /* 검색이 아닐 시 공백 처리 */
            </otherwise>
        </choose>
    </sql>

    <!-- 스토리 검색 (DTO로 가져오기) -->
    <select id="getStorys" resultType="StoryDTO">
        select storys.story_seq, storys.user_id, storys.story_title,
               storys.story_area, storys.story_view, storys.story_like, story_imgs.img_path
        from storys
                 join story_imgs
        on storys.story_seq = story_imgs.story_seq and
           story_imgs.img_path like '%-1%'
        <include refid="condition" />
                 order by <include refid="type" /> desc
        limit #{startNum}, #{rowsPerPage}
    </select>

    <!-- 마이페이지용 스토리 가져오기 -->
    <select id="getMyStorys" resultType="StoryDTO">
        select storys.story_seq, storys.user_id, storys.story_title,
               storys.story_area, storys.story_view, storys.story_like, story_imgs.img_path
        from storys
                 join story_imgs
        on storys.story_seq = story_imgs.story_seq and
           story_imgs.img_path like '%-1%'
        where storys.user_id = #{keyword}
                 order by storys.reg_date desc
        limit #{startNum}, #{rowsPerPage}
    </select>

    <!-- 스토리 데이터 전체 갯수 -->
    <select id="totalStory" resultType="int">
        select count(*)
        from storys
        <include refid="condiCount" />
    </select>
    
    <!-- 마이페이지용 데이터 전체 갯수 -->
    <select id="totalMyStory" resultType="int">
        select count(*)
        from storys
        where user_id = #{keyword}
    </select>


    <!-- 스토리 디테일을 위한 데이터 가져오기 -->
    <select id="getStoryOne" resultType="storysVO">
        select *
        from storys
        where story_seq = #{storySeq}
    </select>

    <!-- 스토리 디테일을 위한 이미지 데이터 가져오기 -->
    <select id="getStoryImgs" resultType="String">
        select img_path
        from story_imgs
        where story_seq = #{storySeq}
        order by story_seq, reg_date desc
    </select>

    <!-- 스토리 댓글 가져오기 -->
    <select id="getStoryCmt" resultType="StoryCommentsVO">
        select *
        from story_comments
        where story_seq = #{storySeq}
        order by stcmt_seq, reg_date desc
    </select>

    <!-- view 증가 -->
    <insert id="addView">
        <selectKey keyProperty="storyView" resultType="int" order="BEFORE">
            select story_view
            from storys
            where story_seq = #{storySeq}
        </selectKey>

        update storys
        set story_view = (#{storyView} + 1)
        where story_seq = #{storySeq}
    </insert>




    <!-- 스토리 등록 -->
    <insert id="regStory">
        insert into storys(user_id, story_title, story_area, story_content)
        values(#{userId}, #{storyTitle}, #{storyArea}, #{storyContent})
    </insert>

    <!-- 등록된 스토리 seq 가져오기 -->
    <select id="selectSeq" resultType="int">
        select story_seq from storys
        where user_id = #{userId}
        order by reg_date desc
        limit 0, 1
    </select>

    <!-- 댓글 등록 -->
    <insert id="regStcmt">
        insert into story_comments(story_seq, stcmt_content, user_id)
        values (#{storySeq}, #{stcmtContent}, #{userId})
    </insert>

    <!-- Like 등록 -->
    <select id="regLike" resultType="int">
        select reg_like(#{storySeq}, #{userId})
    </select>

    <!-- Like 정보 가져오기 -->
    <select id="getLike" resultType="int">
        select count(*)
        from st_like
        where user_id = #{userId} and story_seq = #{storySeq}
    </select>

    <!-- 스토리 삭제 -->
    <delete id="delStory">
        delete from storys
        where story_seq = #{storySeq}
            and user_id = #{userId}
    </delete>
</mapper>